using UnityEngine;
using UnityEditor;
using System.Linq;
using System.Collections.Generic;

namespace HisaCat.HUE
{
    public class ProjectDefinitionsScriptGenerator : AssetPostprocessor
    {
        [InitializeOnLoadMethod]
        private static void InitializeOnLoad()
        {
            GenerateProjectDefinitionsScriptIfDirty();
        }

        private const string EditorBuildSettingsPath = "ProjectSettings/EditorBuildSettings.asset";
        private const string TagManagerPath = "ProjectSettings/TagManager.asset";
        private const string ProjectDefinitionsScriptPath = "Assets/HisaCat/HUE/ProjectDefinitions.cs";

        private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
        {
            var allAssets = importedAssets.Concat(deletedAssets).Concat(movedAssets).Concat(movedFromAssetPaths);
            var needGenerate = allAssets.Any(path =>
                path == EditorBuildSettingsPath ||
                path == TagManagerPath
            );

            if (needGenerate) GenerateProjectDefinitionsScriptIfDirty();
        }

        [MenuItem("HisaCat/HUE/Generate Project Definitions Script")]
        public static void GenerateProjectDefinitionsScriptIfDirty()
        {
            HashSet<string> sceneNames = new();
            foreach (var scene in EditorBuildSettings.scenes)
            {
                var sceneName = System.IO.Path.GetFileNameWithoutExtension(scene.path);
                sceneNames.Add(sceneName);
            }

            var tagManager = AssetDatabase.LoadAssetAtPath<Object>(TagManagerPath);
            if (tagManager == null)
            {
                Debug.LogError($"[{nameof(GenerateProjectDefinitionsScriptIfDirty)}] Failed to load {TagManagerPath}.");
                return;
            }
            var serializedObject = new SerializedObject(tagManager);

            Dictionary<int, string> sortingLayers = new();
            var sortingLayersProperty = serializedObject.FindProperty("m_SortingLayers");
            if (sortingLayersProperty != null)
            {
                for (int i = 0; i < sortingLayersProperty.arraySize; i++)
                {
                    var element = sortingLayersProperty.GetArrayElementAtIndex(i);
                    var nameProperty = element.FindPropertyRelative("name");
                    var idProperty = element.FindPropertyRelative("uniqueID");

                    if (nameProperty != null && idProperty != null)
                        sortingLayers.Add(idProperty.intValue, nameProperty.stringValue);
                }
            }

            Dictionary<int, string> layers = new();
            var layersProperty = serializedObject.FindProperty("layers");
            if (layersProperty != null)
            {
                for (int i = 0; i < layersProperty.arraySize; i++)
                {
                    var layerProperty = layersProperty.GetArrayElementAtIndex(i);
                    if (layerProperty != null && string.IsNullOrEmpty(layerProperty.stringValue) == false)
                        layers.Add(i, layerProperty.stringValue);
                }
            }

            Dictionary<int, string> renderingLayers = new();
            var renderingLayersProperty = serializedObject.FindProperty("m_RenderingLayers");
            if (renderingLayersProperty != null)
            {
                for (int i = 0; i < renderingLayersProperty.arraySize; i++)
                {
                    var renderingLayerProperty = renderingLayersProperty.GetArrayElementAtIndex(i);
                    if (renderingLayerProperty != null && string.IsNullOrEmpty(renderingLayerProperty.stringValue) == false)
                        renderingLayers.Add(i, renderingLayerProperty.stringValue);
                }
            }

            // Generate ProjectDefinitionsScript Script
            var scriptBuilder = new System.Text.StringBuilder();
            scriptBuilder.AppendLine($"// This file is automatically generated by {nameof(ProjectDefinitionsScriptGenerator)}.cs.");
            scriptBuilder.AppendLine("// Do not edit this file manually.");
            scriptBuilder.AppendLine("using UnityEngine;");
            scriptBuilder.AppendLine();

            // Namespace
            {
                scriptBuilder.AppendLine("namespace HisaCat.HUE");
                scriptBuilder.AppendLine("{");

                // ProjectDefinitions
                {
                    scriptBuilder.AppendLine("    public static class ProjectDefinitions");
                    scriptBuilder.AppendLine("    {");

                    // Scenes
                    {
                        scriptBuilder.AppendLine("        public static class Scenes");
                        scriptBuilder.AppendLine("        {");
                        foreach (var sceneName in sceneNames)
                        {
                            string validName = NormalizeName(sceneName);
                            scriptBuilder.AppendLine($"            public const string {validName} = \"{sceneName}\";");
                        }
                        scriptBuilder.AppendLine("        }");
                        scriptBuilder.AppendLine();
                    }

                    // SortingLayers
                    {
                        scriptBuilder.AppendLine("        public static class SortingLayers");
                        scriptBuilder.AppendLine("        {");
                        scriptBuilder.AppendLine("#if UNITY_EDITOR");
                        scriptBuilder.AppendLine("#pragma warning disable IDE0051");
                        scriptBuilder.AppendLine("            [UnityEditor.InitializeOnEnterPlayMode]");
                        scriptBuilder.AppendLine("            private static void OnEnterPlaymodeInEditor(UnityEditor.EnterPlayModeOptions options)");
                        scriptBuilder.AppendLine("            {");
                        scriptBuilder.AppendLine("                if (options.HasFlag(UnityEditor.EnterPlayModeOptions.DisableDomainReload))");
                        scriptBuilder.AppendLine("                {");
                        foreach (var sortingLayer in sortingLayers)
                        {
                            string validName = NormalizeName(sortingLayer.Value);
                            scriptBuilder.AppendLine($"                    {validName} = {sortingLayer.Key};");
                        }
                        scriptBuilder.AppendLine("                }");
                        scriptBuilder.AppendLine("            }");
                        scriptBuilder.AppendLine("#pragma warning restore IDE0051");
                        scriptBuilder.AppendLine("#endif");
                        scriptBuilder.AppendLine();

                        foreach (var sortingLayer in sortingLayers)
                        {
                            string validName = NormalizeName(sortingLayer.Value);
                            scriptBuilder.AppendLine($"            public static int {validName} {{ get; private set; }} = {sortingLayer.Key};");
                        }
                        scriptBuilder.AppendLine("        }");
                        scriptBuilder.AppendLine();
                    }

                    // Layers
                    {
                        scriptBuilder.AppendLine("        public static class Layers");
                        scriptBuilder.AppendLine("        {");
                        scriptBuilder.AppendLine("#if UNITY_EDITOR");
                        scriptBuilder.AppendLine("#pragma warning disable IDE0051");
                        scriptBuilder.AppendLine("            [UnityEditor.InitializeOnEnterPlayMode]");
                        scriptBuilder.AppendLine("            private static void OnEnterPlaymodeInEditor(UnityEditor.EnterPlayModeOptions options)");
                        scriptBuilder.AppendLine("            {");
                        scriptBuilder.AppendLine("                if (options.HasFlag(UnityEditor.EnterPlayModeOptions.DisableDomainReload))");
                        scriptBuilder.AppendLine("                {");
                        foreach (var layer in layers)
                        {
                            string validName = NormalizeName(layer.Value);
                            scriptBuilder.AppendLine($"                    {validName} = {layer.Key};");
                        }
                        scriptBuilder.AppendLine("                }");
                        scriptBuilder.AppendLine("            }");
                        scriptBuilder.AppendLine("#pragma warning restore IDE0051");
                        scriptBuilder.AppendLine("#endif");
                        scriptBuilder.AppendLine();

                        foreach (var layer in layers)
                        {
                            string validName = NormalizeName(layer.Value);
                            scriptBuilder.AppendLine($"            public static int {validName} {{ get; private set; }} = {layer.Key};");
                        }
                        scriptBuilder.AppendLine("        }");
                        scriptBuilder.AppendLine();
                    }

                    // RenderingLayers
                    {
                        scriptBuilder.AppendLine("        public static class RenderingLayers");
                        scriptBuilder.AppendLine("        {");
                        scriptBuilder.AppendLine("#if UNITY_EDITOR");
                        scriptBuilder.AppendLine("#pragma warning disable IDE0051");
                        scriptBuilder.AppendLine("            [UnityEditor.InitializeOnEnterPlayMode]");
                        scriptBuilder.AppendLine("            private static void OnEnterPlaymodeInEditor(UnityEditor.EnterPlayModeOptions options)");
                        scriptBuilder.AppendLine("            {");
                        scriptBuilder.AppendLine("                if (options.HasFlag(UnityEditor.EnterPlayModeOptions.DisableDomainReload))");
                        scriptBuilder.AppendLine("                {");
                        foreach (var renderingLayer in renderingLayers)
                        {
                            string validName = NormalizeName(renderingLayer.Value);
                            scriptBuilder.AppendLine($"                    {validName} = {renderingLayer.Key};");
                        }
                        scriptBuilder.AppendLine("                }");
                        scriptBuilder.AppendLine("            }");
                        scriptBuilder.AppendLine("#pragma warning restore IDE0051");
                        scriptBuilder.AppendLine("#endif");
                        scriptBuilder.AppendLine();

                        foreach (var renderingLayer in renderingLayers)
                        {
                            string validName = NormalizeName(renderingLayer.Value);
                            scriptBuilder.AppendLine($"            public static int {validName} {{ get; private set; }} = {renderingLayer.Key};");
                        }
                        scriptBuilder.AppendLine("        }");
                    }
                    scriptBuilder.AppendLine("    }");
                }
                scriptBuilder.AppendLine("}");
            }

            string script = scriptBuilder.ToString();

            string directory = System.IO.Path.GetDirectoryName(ProjectDefinitionsScriptPath);
            if (System.IO.Directory.Exists(directory) == false)
                System.IO.Directory.CreateDirectory(directory);

            if (System.IO.File.Exists(ProjectDefinitionsScriptPath))
            {
                var existingScript = System.IO.File.ReadAllText(ProjectDefinitionsScriptPath);
                if (existingScript == script)
                    return;
            }

            System.IO.File.WriteAllText(ProjectDefinitionsScriptPath, script);
            AssetDatabase.Refresh();
        }

        private static string NormalizeName(string name)
        {
            if (string.IsNullOrEmpty(name))
                return "Invalid";

            // If first character is a digit, add _
            if (char.IsDigit(name[0]))
                name = "_" + name;

            // Replace invalid characters with _
            var validName = new System.Text.StringBuilder();
            foreach (char c in name)
            {
                if (char.IsLetterOrDigit(c) || c == '_')
                    validName.Append(c);
                else
                    validName.Append('_');
            }

            return validName.ToString();
        }
    }
}
