using UnityEngine;
using UnityEditor;
using UnityEditor.Callbacks;
using System.Runtime.CompilerServices;
using System.Reflection;
using System.Text.RegularExpressions;
using System;
using UnityEditorInternal;

public static class ManagedDebugEditor
{
    /// <summary>
    /// This method is used to open the caller location when a Console entry generated by ManagedDebug is clicked.
    /// </summary>
    [OnOpenAsset(callbackOrder: 0)]
    private static bool OnOpenAsset(int instanceID, int line)
    {
        if (EditorUtility.InstanceIDToObject(instanceID) is not MonoScript monoScript) return false;
        if (monoScript.GetClass() != typeof(ManagedDebug)) return false;

        var stack_trace = GetStackTrace();
        if (string.IsNullOrEmpty(stack_trace)) return false;

        var matches = Regex.Match(stack_trace, @"\(at(.+)\)", RegexOptions.IgnoreCase);
        var pathline = string.Empty;
        if (matches.Success == false)
        {
            Debug.LogError($"[{nameof(ManagedDebugEditor)}] Failed to parse stack trace.");
            return false;
        }

        pathline = matches.Groups[1].Value;
        matches = matches.NextMatch();
        if (matches.Success == false)
        {
            Debug.LogError($"[{nameof(ManagedDebugEditor)}] Failed to parse stack trace.");
            return false;
        }

        pathline = matches.Groups[1].Value.Replace(" ", "");
        var split_index = pathline.LastIndexOf(":");
        var path = pathline[..split_index];
        line = Convert.ToInt32(pathline[(split_index + 1)..]);
        var fullpath = Application.dataPath[..Application.dataPath.LastIndexOf("Assets")] + path;
        var strPath = fullpath.Replace('/', '\\');
        InternalEditorUtility.OpenFileAtLineExternal(strPath, line);
        return true;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static string GetStackTrace()
    {
        var assembly_unity_editor = Assembly.GetAssembly(typeof(EditorWindow));
        if (assembly_unity_editor == null) return null;

        var type_console_window = assembly_unity_editor.GetType("UnityEditor.ConsoleWindow");
        if (type_console_window == null) return null;

        var field_console_window = type_console_window.GetField("ms_ConsoleWindow", BindingFlags.Static | BindingFlags.NonPublic);
        if (field_console_window == null) return null;

        var instance_console_window = field_console_window.GetValue(null);
        if (instance_console_window == null) return null;

        if ((object)EditorWindow.focusedWindow == instance_console_window)
        {
            var type_list_view_state = assembly_unity_editor.GetType("UnityEditor.ListViewState");
            if (type_list_view_state == null) return null;

            var field_list_view = type_console_window.GetField("m_ListView", BindingFlags.Instance | BindingFlags.NonPublic);
            if (field_list_view == null) return null;

            var value_list_view = field_list_view.GetValue(instance_console_window);
            if (value_list_view == null) return null;

            var field_active_text = type_console_window.GetField("m_ActiveText", BindingFlags.Instance | BindingFlags.NonPublic);
            if (field_active_text == null) return null;

            string value_active_text = field_active_text.GetValue(instance_console_window).ToString();
            return value_active_text;
        }

        return null;
    }
}